import cv2
import random
from scipy import ndimage
import numpy as np
import math
import os
import shutil

import rosbag
from cv_bridge import CvBridge, CvBridgeError
bridge = CvBridge()  # ros img transfer to cv2


class transfer_to_one_hot():
    def __init__(self, rng, step):
        self.oh_n = int(math.ceil((rng[1] - rng[0]) / step) + 1)
        print('one hot size is', self.oh_n)
        self.step = step
        self.count = [0] * self.oh_n

    def transter(self, data):
        one_hot = [0] * self.oh_n
        ind = int(round(data / self.step + math.floor(self.oh_n / 2)))
        try:
            one_hot[ind] = 1
            # print(data, ind, one_hot)
            self.count[ind] += 1
        except:
            print('---WORNING---', data, ind, one_hot)
            exit()

        return one_hot


def balance(count, final_out, model='ave'):
    print('------data balancing------')
    print('oranginal ration: ', count)

    if model == 'min':
        num = min(count)
        print('balance based on the minimum ration: ', num)
    elif model == 'max':
        num = max(count)
        print('balance based on the maximum ration: ', num)
    else:
        num = sum(count) // len(count)
        print('balance based on the average ration: ', num)

    new_count = [[]] * len(count)
    for ind, class_num in enumerate(count):
        print('---the %d class---' % (ind + 1))
        tmp = []

        if class_num >= num:
            resultList = random.sample(range(0, class_num), num)
            for i in resultList:
                tmp.append(final_out[ind][i])
        elif class_num == 0:
            continue
        else:
            tim = num // class_num
            remainder = num % class_num
            # print('will add %d times sata and %d extra data'%(tim, remainder))

            for i in range(tim):
                tmp += final_out[ind]

            if remainder:
                resultList = random.sample(range(0, class_num), remainder)
                for i in resultList:
                    tmp.append(final_out[ind][i])

            random.shuffle(tmp)

        final_out[ind] = tmp
        new_count[ind] = len(final_out[ind])

    print('balanced finished: ', new_count)

    return final_out


def augmentation(img):
    # img = img.rotate(random.randint(0,15))
    img = ndimage.rotate(img, random.randint(-15, 15), reshape=False)

    cord = [random.randint(180, 370), random.randint(0, 24)]

    img = img[cord[0]:cord[0] + 360, cord[1]:cord[1] + 800]  # stanard = [330:690, 24:824]

    return img


def preprocess():
    for ind, d in enumerate(final_out):
        print('------%d / %d------'%(ind, len(final_out)))

        new_dir = os.path.join(PATH_TO_SAVE, onlydirs[ind])
        if not os.path.exists(new_dir):
            os.mkdir(new_dir)

        for i, msg in enumerate(d):
        ## image load
            camera_image = cv2.imread(os.path.join(PATH_TO_INPUT, onlydirs[ind], msg))

        # # prepocessing
        # fisheye1_image = cv2.cvtColor(fisheye1_image, cv2.COLOR_BGR2GRAY)
            camera_image = augmentation(camera_image)

        # cv2.imshow('image', fisheye1_image)
        # cv2.waitKey(0)

            cv2.imwrite(new_dir+'/'+os.path.splitext(msg)[0]+'_'+str(i)+'.jpg', camera_image)
            # print('save to:', new_dir+'/'+str(idxImg).zfill(5)+'camera'+'.jpg')


if __name__ == "__main__":
    PATH_TO_INPUT = '/root/catkin_ws/src/Embedding-real-time-ML-algorithms-for-auto-cars/data/IMREDD/processed'
    PATH_TO_SAVE = '/root/catkin_ws/src/Embedding-real-time-ML-algorithms-for-auto-cars/data/IMREDD/balanced'

    onlydirs = [f for f in os.listdir(PATH_TO_INPUT) if os.path.isdir(os.path.join(PATH_TO_INPUT, f))]
    # onlydirs.sort()

    final_out = [[]] * len(onlydirs)
    count = []
    for ind, dir in enumerate(onlydirs):
        # load data directly from rosbag
        CA_PATH = os.path.join(PATH_TO_INPUT, dir)
        print('---read bag: ', CA_PATH)

        final_out[ind] = [f for f in os.listdir(CA_PATH) if os.path.isfile(os.path.join(CA_PATH, f))]
        count.append(len(final_out[ind]))

    final_out = balance(count, final_out)

    print('image load and processing')
    preprocess()
